library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity Pipe_Controller is
	port(Clk, vert_sync: in std_logic;
		pixel_row, pixel_col: in std_logic_vector(9 downto 0);
		red, green, blue: out std_logic
	);
end entity Pipe_Controller;

architecture behaviour of Pipe_Controller is

	component Pipes is
		port(
			clk, vert_sync, enable: in std_logic;
			pixel_row, pixel_col: in std_logic_vector(9 downto 0);
			gap_y: in std_logic_vector(9 downto 0);
			pipe_on: out std_logic;
		);
	end component Pipes;
	
	signal gap1 <= unsigned(9 downto 0) := to_unsigned(10,10)
	signal gap2 <= unsigned(9 downto 0) := to_unsigned(20,10)
	signal gap3 <= unsigned(9 downto 0) := to_unsigned(30,10)
	signal pipe_on1 <= std_logic;
	signal pipe_on2 <= std_logic;
	signal pipe_on3 <= std_logic;
	signal enable1 <= std_logic := '0';
	signal enable2 <= std_logic := '0';
	signal enable3 <= std_logic := '0';
	begin
		
		P0: Pipes
			(clk => Clk,
			vert_sync => vert_sync,
			enable => enable1
			pixel_row => pixel_row,
			pixel_col => pixel_col,
			gap_y => gap1,
			pipe_on =>pipe_on1)
			
		P1: Pipes
			(clk => Clk,
			vert_sync => vert_sync,
			enable => enable2,
			pixel_row => pixel_row,
			pixel_col => pixel_col,
			gap_y => gap2,
			pipe_on =>pipe_on2)

		P2: Pipes
			(clk => Clk,
			vert_sync => vert_sync,
			enable => enable3
			pixel_row => pixel_row,
			pixel_col => pixel_col,
			gap_y => gap3,
			pipe_on => pipe_on3)

			process(vert_sync)
				 variable count  : integer := 0;
			begin
				 if rising_edge(vert_sync) then

					  if count = 5 then
							enable1 <= '1';
							count := count + 1;
							
					  elsif count = 10 then
							enable2 <= '1';
							count := count + 1;
							
					  elsif count > 100 then
							enable3 <= '1'
							
					  else
							count := count + 1;
					  end if;
			end if;
		 end process;
				

end behaviour;